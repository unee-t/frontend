# Variables needed for this script are:

# Case 1: Stored on Travis Settings
  # For all environments:
    # - DOCKER_CI_REPO_NAME
    # - DOCKER_USERNAME
    # - DOCKER_PASSWORD

  #For dev environment:
    # - AWS_ACCOUNT_USER_ID_DEV
    # - AWS_ACCOUNT_SECRET_DEV
    # - AWS_PROFILE_DEV

  #For Prod environment:
    # - AWS_ACCOUNT_USER_ID_PROD
    # - AWS_ACCOUNT_SECRET_PROD
    # - AWS_PROFILE_PROD

  #For Demo environment:
    # - AWS_ACCOUNT_USER_ID_DEMO
    # - AWS_ACCOUNT_SECRET_DEMO
    # - AWS_PROFILE_DEMO

# Case 2: Created when Travis CI runs
    # - IMAGE_TAG

language: node_js

node_js:
  - lts/*

env:
  global:
    - COMMIT=${TRAVIS_COMMIT::7}
    #Add IMAGE_TAG variable to build docker image
    - IMAGE_TAG=${COMMIT}

before_install:
  - curl https://install.meteor.com | /bin/sh
  - export PATH="$HOME/.meteor:$PATH"
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin
  - curl -o $HOME/.local/bin/ecs-cli
    https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest &&
    chmod +x $HOME/.local/bin/ecs-cli

#cache:
#  directories:
#    - node_modules

install:
  - npm cache verify
  - meteor npm install
  # Install missing packages
  - npm install ajv
  - meteor npm install --save @babel/runtime react
  - meteor npm install --save @babel/runtime
  - meteor npm install jquery
  - meteor npm install --save react
  # Update Meteor and all packages
  #- meteor update --all-packages
  # We are running this twice since there are chained dependencies
  #- meteor update --all-packages
  # update the Meteor packages (but NOT meteor) to the latest version
#  - meteor update --packages-only
  # We are running this twice since there are chained dependencies
  - meteor update --packages-only
  # fix Errors and vulnerabilities
  - npm audit fix

script:
  # List all install package for easier debugging
  #- meteor npm ls
  # Test that our code is working as expected on that image.
  - npm t

matrix:
  include:
    - env: DEPLOY=dev
    - env: DEPLOY=demo
      if: tag IS present
      deploy:
        provider: script
        script: TRAVIS_PROFILE=$AWS_PROFILE_DEMO AWS_ACCESS_KEY_ID=$AWS_ACCOUNT_USER_ID_DEMO AWS_SECRET_ACCESS_KEY=$AWS_ACCOUNT_SECRET_DEMO AWS_REGION=$AWS_DEFAULT_REGION ./deploy.sh -d
        on:
          branch: master
          tags: true
    - env: DEPLOY=prod
      if: tag IS present
      deploy:
        provider: script
        # TODO - Distribution-id uses a hardcoded value 
        # This will ONLY work for the main Unee-T installation but no other Unee-T Installation
        # This is a problem we need to fix
        script: TRAVIS_PROFILE=$AWS_PROFILE_PROD AWS_ACCESS_KEY_ID=$AWS_ACCOUNT_USER_ID_PROD AWS_SECRET_ACCESS_KEY=$AWS_ACCOUNT_SECRET_PROD AWS_REGION=$AWS_DEFAULT_REGION ./deploy.sh -p && AWS_ACCESS_KEY_ID=$AWS_ACCOUNT_USER_ID_PROD AWS_SECRET_ACCESS_KEY=$AWS_ACCOUNT_SECRET_PROD aws cloudfront create-invalidation --distribution-id E173XT6X8V4A18 --paths '/*'
        # END - TODO - Distribution-id uses a hardcoded value 
        on:
          branch: master
          tags: true